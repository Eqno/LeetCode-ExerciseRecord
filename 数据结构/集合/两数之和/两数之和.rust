/*
problem:
    给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那 两个整数，并返回它们的数组下标。
    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
    你可以按任意顺序返回答案。
example:
    输入：nums = [2,7,11,15], target = 9
    输出：[0,1]
    解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
*/
use std::collections::HashMap;
impl Solution {
    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {
        let map = &mut HashMap::new();
        for (i, x) in nums.iter().enumerate() {
            if let Some(j) = map.get(&(target-x)) {
                if *j != i {
                    return vec![*j as i32, i as i32];
                }
            }
            else {
                map.insert(x, i);
            }
        }
        return vec![0, 0];
    }
}